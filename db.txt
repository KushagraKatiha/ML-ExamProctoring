CREATE DATABASE ExamSystem;
USE ExamSystem;

-- Address Table
CREATE TABLE Address (
    add_id INT PRIMARY KEY AUTO_INCREMENT,
    state VARCHAR(50),
    city VARCHAR(50),
    pin INT
);

-- Course Table
CREATE TABLE Course (
    course_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(20),
    year INT,
    semester INT
);

-- Subject Table
CREATE TABLE Subject (
    sub_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(20)
);

-- Course_Sub Table (Many-to-Many Relationship between Course and Subject)
CREATE TABLE Course_Sub (
    id INT PRIMARY KEY AUTO_INCREMENT,
    sub_id INT,
    course_id INT,
    FOREIGN KEY (sub_id) REFERENCES Subject(sub_id),
    FOREIGN KEY (course_id) REFERENCES Course(course_id)
);

-- Teacher Table
CREATE TABLE Teacher (
    teacher_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50),
    email VARCHAR(50),
    phno VARCHAR(20),
    usrnm VARCHAR(20),
    paswrd VARCHAR(20),
    idcard BLOB
);

-- Student Table
CREATE TABLE Student (
    stu_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(50),
    qualification VARCHAR(50),
    dob DATETIME,
    course_id INT,
    add_id INT,
    phno VARCHAR(20),
    usrnm VARCHAR(20),
    paswrd VARCHAR(20),
    idcard BLOB,
    FOREIGN KEY (course_id) REFERENCES Course(course_id),
    FOREIGN KEY (add_id) REFERENCES Address(add_id)
);

-- Exam Table
CREATE TABLE Exam (
    exam_id INT PRIMARY KEY AUTO_INCREMENT,
    exam_name VARCHAR(100),
    exam_course INT,
    exam_subject INT,
    created_by INT,
    FOREIGN KEY (exam_course) REFERENCES Course(course_id),
    FOREIGN KEY (exam_subject) REFERENCES Subject(sub_id),
    FOREIGN KEY (created_by) REFERENCES Teacher(teacher_id)
);

-- Question Table
CREATE TABLE Question (
    ques_id INT PRIMARY KEY AUTO_INCREMENT,
    ques_text TEXT
);

-- Option Table
CREATE TABLE Option (
    option_id INT PRIMARY KEY AUTO_INCREMENT,
    option_text TEXT
);

-- Question-Answer Mapping Table
CREATE TABLE ques_ans_map (
    id INT PRIMARY KEY AUTO_INCREMENT,
    ques_id INT,
    option_id INT,
    is_correct BOOLEAN,
    FOREIGN KEY (ques_id) REFERENCES Question(ques_id),
    FOREIGN KEY (option_id) REFERENCES Option(option_id)
);

-- Student Exam Table
CREATE TABLE student_exam (
    id INT PRIMARY KEY AUTO_INCREMENT,
    stu_id INT,
    exam_id INT,
    AttemptDate DATETIME,
    FOREIGN KEY (stu_id) REFERENCES Student(stu_id),
    FOREIGN KEY (exam_id) REFERENCES Exam(exam_id)
);

-- Student Result Table
CREATE TABLE student_result (
    id INT PRIMARY KEY AUTO_INCREMENT,
    stu_id INT,
    exam_id INT,
    score INT,
    createdate DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (stu_id) REFERENCES Student(stu_id),
    FOREIGN KEY (exam_id) REFERENCES Exam(exam_id)
);

-- Student Answer Table
CREATE TABLE student_ans (
    id INT PRIMARY KEY AUTO_INCREMENT,
    stu_id INT,
    exam_id INT,
    ques_id INT,
    ans_id INT,
    is_correct BOOLEAN,
    FOREIGN KEY (stu_id) REFERENCES Student(stu_id),
    FOREIGN KEY (exam_id) REFERENCES Exam(exam_id),
    FOREIGN KEY (ques_id) REFERENCES Question(ques_id),
    FOREIGN KEY (ans_id) REFERENCES Option(option_id)
);

-- Stored Procedure to Register a Teacher
DELIMITER $$
CREATE PROCEDURE RegisterTeacher (
    IN p_name VARCHAR(50),
    IN p_email VARCHAR(50),
    IN p_phno VARCHAR(20),
    IN p_usrnm VARCHAR(20),
    IN p_paswrd VARCHAR(20)
)
BEGIN
    INSERT INTO Teacher (name, email, phno, usrnm, paswrd)
    VALUES (p_name, p_email, p_phno, p_usrnm, p_paswrd);
END $$
DELIMITER ;

-- Stored Procedure to Register a Student
DELIMITER $$
CREATE PROCEDURE RegisterStudent (
    IN p_name VARCHAR(50),
    IN p_qualification VARCHAR(50),
    IN p_dob DATETIME,
    IN p_course_id INT,
    IN p_add_id INT,
    IN p_phno VARCHAR(20),
    IN p_usrnm VARCHAR(20),
    IN p_paswrd VARCHAR(20)
)
BEGIN
    INSERT INTO Student (name, qualification, dob, course_id, add_id, phno, usrnm, paswrd)
    VALUES (p_name, p_qualification, p_dob, p_course_id, p_add_id, p_phno, p_usrnm, p_paswrd);
END $$
DELIMITER ;

-- Stored Procedure to Create an Exam
DELIMITER $$
CREATE PROCEDURE CreateExam (
    IN p_exam_name VARCHAR(100),
    IN p_exam_course INT,
    IN p_exam_subject INT,
    IN p_created_by INT
)
BEGIN
    INSERT INTO Exam (exam_name, exam_course, exam_subject, created_by)
    VALUES (p_exam_name, p_exam_course, p_exam_subject, p_created_by);
END $$
DELIMITER ;

-- Stored Procedure for a Student to Attempt an Exam
DELIMITER $$
CREATE PROCEDURE AttemptExam (
    IN p_stu_id INT,
    IN p_exam_id INT
)
BEGIN
    INSERT INTO student_exam (stu_id, exam_id, AttemptDate)
    VALUES (p_stu_id, p_exam_id, NOW());
END $$
DELIMITER ;

-- Stored Procedure to Save Exam Results Using Temp Table
DELIMITER $$
CREATE PROCEDURE SaveExamResult (
    IN p_stu_id INT,
    IN p_exam_id INT
)
BEGIN
    CREATE TEMPORARY TABLE TempResults AS (
        SELECT sa.stu_id, sa.exam_id, COUNT(sa.is_correct) AS score
        FROM student_ans sa
        WHERE sa.stu_id = p_stu_id AND sa.exam_id = p_exam_id AND sa.is_correct = 1
    );
    
    INSERT INTO student_result (stu_id, exam_id, score, createdate)
    SELECT stu_id, exam_id, score, NOW() FROM TempResults;
    
    DROP TEMPORARY TABLE TempResults;
END $$
DELIMITER ;

-- Stored Procedure to View All Students
DELIMITER $$
CREATE PROCEDURE GetAllStudents()
BEGIN
    SELECT * FROM Student;
END $$
DELIMITER ;

-- Stored Procedure to View All Results
DELIMITER $$
CREATE PROCEDURE GetAllResults()
BEGIN
    SELECT * FROM student_result;
END $$
DELIMITER ;

